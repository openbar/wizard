#!/bin/sh

OB_VERSION=${1:-refs/tags/1.0.5}

# Colorize the output
red()    { printf "\033[0;31m${@}\033[0m"; }
green()  { printf "\033[0;32m${@}\033[0m"; }
yellow() { printf "\033[0;33m${@}\033[0m"; }

## ask_yesno <prompt> [default=yes]
ask_yesno()
{
    local DEFAULT=${2:-yes}

    [ ${DEFAULT} = yes ] && local PROMPT="[Y/n]" || local PROMPT="[y/N]"

    while true
    do
        local YESNO
        echo >&2 && read -p "$(yellow "${1}") ${PROMPT} " YESNO
        case "${YESNO}" in
            "") [ ${DEFAULT} = yes ] && return 0 || return 1 ;;
            [yY]|[yY][eE][sS]) return 0 ;;
            [nN]|[nN][oO]) return 1 ;;
            *) echo >&2 $(red "Invalid response: ${YESNO}") ;;
        esac
    done
}

## ask_value <prompt> [default]
ask_value()
{
    local DEFAULT=${2}

    [ -n "${DEFAULT}" ] && local PROMPT=" [${DEFAULT}]"

    while true
    do
        local VALUE
        echo >&2 && read -p "$(yellow "${1}")${PROMPT} " VALUE
        if [ -z "${VALUE:-${DEFAULT}}" ]
        then
            echo >&2 $(red "Invalid empty response")
        else
            echo ${VALUE:-${DEFAULT}}
            return 0
        fi
    done
}

## ask_select <prompt> <colon-list> [default=1]
ask_select()
{
    ## print_list <colon-list>
    print_list()
    {
        echo ${1} | awk -F: '{
            for (i = 1; i <= NF; i++) {
                printf("%2s) %s\n", i, $i) > "/dev/stderr";
            }
        }'
    }

    ## check_value <colon-list> <value> [default=1]
    check_value()
    {
        echo ${1} | awk -F: -v value=${2:-${3:-1}} '{
            lcvalue = tolower(value);
            for (i = 1; i <= NF; i++) {
                if (lcvalue == i || lcvalue == $i) {
                    printf("%s", $i);
                    exit;
                }
            }
        }'
    }

    local DEFAULT=$(check_value ${2} ${3:-1})

    while true
    do
        echo >&2 && print_list ${2}
        local VALUE
        read -p "$(yellow "${1}") [${DEFAULT}] " VALUE
        local SVALUE=$(check_value ${2} "${VALUE}" ${DEFAULT})
        if [ -z "${SVALUE}" ]
        then
            echo >&2 $(red "Invalid response: ${VALUE}")
        else
            echo ${SVALUE}
            return 0
        fi
    done
}

## sanitize [<option>...]
sanitize()
{
    local VALUE="$(cat)"

    # Protect against CTRL-D
    if [ -z "${VALUE}" ]
    then
        echo >&2 $(red "Invalid empty value")
        exit 1
    fi

    for OPTION in $@
    do
        local OLD_VALUE="${VALUE}"
        local PROMPT_NEQ= PROMPT=

        case ${OPTION} in
            onlyprint)
                PROMPT_NEQ="Only printable character allowed"
                VALUE=$(echo ${VALUE} | sed -e "s/[^[[:print:]]]//g")
                ;;
            noslash)
                PROMPT_NEQ="Slash character not allowed"
                VALUE=$(echo ${VALUE} | sed -e "s:/::g")
                ;;
            noleadingslash)
                PROMPT_NEQ="Leading slash character not allowed"
                VALUE=$(echo ${VALUE} | sed -e "s:^/::")
                ;;
            notrailingslash)
                PROMPT_NEQ="Trailing slash character not allowed"
                VALUE=$(echo ${VALUE} | sed -e "s:/$::")
                ;;
            nospace)
                PROMPT_NEQ="Space character not allowed"
                VALUE=$(echo ${VALUE} | sed -e "s/[[:space:]]//g")
                ;;
            trailingdefconfig)
                PROMPT_NEQ="Trailing '_defconfig' is mandatory"
                VALUE=$(echo ${VALUE} | sed -e "s/_defconfig$//" -e "s/$/_defconfig/")
                ;;
            preferedlower)
                echo ${VALUE} | grep -q "[[:upper:]]" \
                    && PROMPT="Using lowercase characters is recommended"
                ;;
            *)
                PROMPT="Invalid option ${OPTION}"
                ;;
        esac

        if [ -n "${PROMPT_NEQ}" -a "${OLD_VALUE}" != "${VALUE}" ]
        then
            echo >&2 $(red "${PROMPT_NEQ}:") "'${OLD_VALUE}' -> '${VALUE}'"
        elif [ -n "${PROMPT}" ]
        then
            echo >&2 $(red "${PROMPT}")
        fi
    done

    echo ${VALUE}
}

# Create the temporary directory
TMP_DIR=$(mktemp -d)

# Exit handler
on_exit()
{
    local EXIT_STATUS=${1:-$?}

    # Remove the temporary directory
    rm -rf ${TMP_DIR}

    # Print a status line
    if [ ${EXIT_STATUS} -eq 0 ]
    then
        echo
        echo $(green "Openbar project generation done")
    else
        echo >&2 && echo >&2
        echo >&2 $(red "Openbar project generation aborted")
    fi

    # Self remove
    rm ${0}

    exit ${EXIT_STATUS}
}

# Ensure the exit handler is always called
# https://unix.stackexchange.com/a/240736/117394
on_sigint()
{
    trap - INT EXIT
    on_exit 1
    kill -s INT $$
}

trap on_sigint INT
trap on_exit EXIT

# Enable exit on error
set -e

### Ask the required configuration for the project

OB_NAME=$(ask_value "What is the name of your project?" \
    | sanitize onlyprint noslash nospace preferedlower)

OB_TYPE=$(ask_select "What type of project is it?" "standard:yocto" "standard")

OB_GIT_TYPE=$(ask_select "How do you want to manage the git repositories?" "submodule:repo" "repo")

if [ "${OB_GIT_TYPE}" = repo ]
then
    OB_GIT_MAIN_PATH_DEFAULT="${OB_NAME}/configs"

    if ask_yesno "Do you want the repo manifest to be stored in a dedicated repository?" "yes"
    then
        OB_REPO_TYPE=split
    fi

else
    OB_GIT_MAIN_PATH_DEFAULT="${OB_NAME}"
fi

if [ "${OB_TYPE}" = yocto ]
then
    OB_OPENBAR_DIR_DEFAULT="platform/openbar"

    if ask_yesno "Do you need meta-openembedded?" "no"
    then
        OB_YOCTO_OE=yes
    fi

else
    OB_OPENBAR_DIR_DEFAULT="third-party/openbar"
fi

OB_GIT_MAIN_PATH=$(ask_value "What is the path of the main git repository?" ${OB_GIT_MAIN_PATH_DEFAULT} \
    | sanitize onlyprint noleadingslash notrailingslash nospace preferedlower)

if [ "${OB_REPO_TYPE}" = split ]
then
    OB_GIT_MANIFEST_PATH=$(ask_value "What is the path of the manifest git repository?" "${OB_NAME}/manifest" \
        | sanitize onlyprint noleadingslash notrailingslash nospace preferedlower)
else
    OB_GIT_MANIFEST_PATH=${OB_GIT_MAIN_PATH}
fi

OB_CONFIGS_DIR=$(ask_value "What is the path of the configuration directory?" "configs" \
    | sanitize onlyprint noleadingslash notrailingslash nospace preferedlower)

OB_OPENBAR_DIR=$(ask_value "What is the path of the openbar directory?" ${OB_OPENBAR_DIR_DEFAULT} \
    | sanitize onlyprint noleadingslash notrailingslash nospace preferedlower)

if [ "${OB_TYPE}" = yocto ]
then
    OB_POKY_DIR=$(ask_value "What is the path of the poky directory?" "platform/poky" \
        | sanitize onlyprint noleadingslash notrailingslash nospace preferedlower)

    if [ "${OB_YOCTO_OE}" = yes ]
    then
        OB_OE_DIR=$(ask_value "What is the path of the meta-openembedded directory?" "platform/meta-openembedded" \
            | sanitize onlyprint noleadingslash notrailingslash nospace preferedlower)
    fi
fi

if [ "${OB_GIT_TYPE}" = repo ]
then
    OB_ROOT_FILE=$(ask_value "What is the name of the openbar root file?" "openbar.mk" \
        | sanitize onlyprint noleadingslash notrailingslash nospace preferedlower)
else
    OB_ROOT_FILE="Makefile"
fi

OB_DEFCONFIG_FILE=$(ask_value "What is the name of the default configuration file?" "${OB_NAME}_defconfig" \
    | sanitize onlyprint noslash nospace trailingdefconfig preferedlower)

OB_GIT_BRANCH=$(ask_value "What is the name of the git branch?" "main" \
    | sanitize onlyprint noleadingslash notrailingslash nospace preferedlower)

if ask_yesno "Do you want to configure the git remote?" "no"
then
    OB_GIT_REMOTE=yes

    OB_GIT_BASEURL=$(ask_value "What is the git base url?" "https://github.com")
fi

OB_OUTPUT_DIR=$(ask_value "What is the output directory?" "." \
    | sanitize onlyprint notrailingslash)

### Generate the specified project

## create_dockerfile_standard <directory>
create_dockerfile_standard()
{
    mkdir -p ${1}/docker/default
    cat > ${1}/docker/default/Dockerfile << "EOF"
FROM	ubuntu:20.04

RUN	set -x \
	# Install the needed package
	&& export DEBIAN_FRONTEND=noninteractive \
	&& apt update \
	&& apt install --no-install-recommends -y \
		build-essential \
		gawk \
		make \
	&& rm -rf /var/lib/apt/lists/*
EOF
}

## create_dockerfile_yocto <directory>
create_dockerfile_yocto()
{
    mkdir -p ${1}/docker/default
    cat > ${1}/docker/default/Dockerfile << "EOF"
FROM	ubuntu:20.04

RUN	set -x \
	# Install the needed package
	&& export DEBIAN_FRONTEND=noninteractive \
	&& apt update \
	&& apt install --no-install-recommends -y \
		build-essential \
		ca-certificates \
		chrpath \
		cpio \
		diffstat \
		fakeroot \
		file \
		gawk \
		git \
		iproute2 \
		iptables \
		locales \
		lz4 \
		make \
		openssh-client \
		python3 \
		python3-distutils \
		qemu \
		wget \
		zstd \
	&& rm -rf /var/lib/apt/lists/* \
	# Configure the locales
	&& localedef -i en_US -c -f UTF-8 en_US.UTF-8

ENV	LANG en_US.utf8
EOF
}

## create_defconfig_standard <directory>
create_defconfig_standard()
{
    cat > ${1}/${OB_DEFCONFIG_FILE} << "EOF"
build:
	echo "Nothing to do"
EOF
}

## create_defconfig_yocto <directory>
create_defconfig_yocto()
{
    cat > ${1}/${OB_DEFCONFIG_FILE} << "EOF"
DISTRO  := poky
IMAGE   := core-image-minimal
MACHINE := qemux86-64

build:
	bitbake ${IMAGE}

OB_MANUAL_TARGETS += clean
clean:
	${RM} -r ${OB_BUILD_DIR}

DL_DIR     ?= ${OB_ROOT_DIR}/downloads
SSTATE_DIR ?= ${OB_ROOT_DIR}/sstate-cache
EOF
}

## create_openbar_root_standard <directory>
create_openbar_root_standard()
{
    local FILE=${1}/${OB_ROOT_FILE}
    mkdir -p $(dirname ${FILE})
    cat > ${FILE} << EOF
### DO NOT EDIT THIS FILE ###
export OB_TYPE          := standard
export OB_DEFCONFIG_DIR := \${CURDIR}/${OB_CONFIGS_DIR}
export OB_DOCKER_DIR    := \${CURDIR}/${OB_CONFIGS_DIR}/docker

include ${OB_OPENBAR_DIR}/main.mk
### DO NOT EDIT THIS FILE ###
EOF
}

## create_openbar_root_yocto <directory>
create_openbar_root_yocto()
{
    local FILE=${1}/${OB_ROOT_FILE}
    mkdir -p $(dirname ${FILE})
    cat > ${FILE} << EOF
### DO NOT EDIT THIS FILE ###
export OB_TYPE              := yocto
export OB_DEFCONFIG_DIR     := \${CURDIR}/${OB_CONFIGS_DIR}
export OB_DOCKER_DIR        := \${CURDIR}/${OB_CONFIGS_DIR}/docker
export OB_BB_INIT_BUILD_ENV := \${CURDIR}/${OB_POKY_DIR}/oe-init-build-env

include ${OB_OPENBAR_DIR}/main.mk
### DO NOT EDIT THIS FILE ###
EOF
}

## create_manifest_standard <directory>
create_manifest_standard()
{
    local CONFIG_TOPDIR=$(dirname ${OB_GIT_MAIN_PATH})
    local ORIGIN_FETCH=$(realpath -m --relative-to=${CONFIG_TOPDIR:-.} .)

    cat > ${1}/default.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
	<remote name="origin" fetch="${ORIGIN_FETCH}" />
	<remote name="github" fetch="https://github.com" />

	<default remote="origin" revision="main" sync-j="4" />

	<project path="${OB_CONFIGS_DIR}" name="${OB_GIT_MAIN_PATH}" >
		<copyfile src="${OB_ROOT_FILE}" dest="Makefile" />
	</project>

	<project path="${OB_OPENBAR_DIR}" remote="github" revision="${OB_VERSION}" name="openbar/openbar" />
</manifest>
EOF
}

## create_manifest_yocto <directory>
create_manifest_yocto()
{
    local CONFIG_TOPDIR=$(dirname ${OB_GIT_MAIN_PATH})
    local ORIGIN_FETCH=$(realpath -m --relative-to=${CONFIG_TOPDIR:-.} .)

    cat > ${1}/default.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
	<remote name="origin" fetch="${ORIGIN_FETCH}" />
	<remote name="github" fetch="https://github.com" />
	<remote name="yoctoproject" fetch="https://git.yoctoproject.org" />
EOF

    if [ "${OB_YOCTO_OE}" = yes ]
    then
        cat >> ${1}/default.xml << EOF
	<remote name="openembedded" fetch="https://git.openembedded.org" />
EOF
    fi

    cat >> ${1}/default.xml << EOF

	<default remote="origin" revision="main" sync-j="4" />

	<project path="${OB_CONFIGS_DIR}" name="${OB_GIT_MAIN_PATH}" >
		<copyfile src="${OB_ROOT_FILE}" dest="Makefile" />
	</project>

	<project path="${OB_OPENBAR_DIR}" remote="github" revision="${OB_VERSION}" name="openbar/openbar" />
	<project path="${OB_POKY_DIR}" remote="yoctoproject" revision="master" name="poky" />
EOF

    if [ "${OB_YOCTO_OE}" = yes ]
    then
        cat >> ${1}/default.xml << EOF
	<project path="${OB_OE_DIR}" remote="openembedded" revision="master" name="meta-openembedded" />
EOF
    fi

    cat >> ${1}/default.xml << EOF
</manifest>
EOF
}

## create_gitignore_submodule <directory>
create_gitignore_submodule()
{
    cat > ${1}/.gitignore << EOF
/.config*
EOF
}

## create_project <directory>
create_project()
{(
    echo && cd ${1}

    echo "Creating git directory..."
    mkdir -p ${OB_GIT_MAIN_PATH} ${OB_GIT_MANIFEST_PATH}

    echo "Initializing git directory..."
    for DIR in $(echo ${OB_GIT_MAIN_PATH} ${OB_GIT_MANIFEST_PATH} | tr " " "\n" | sort -u)
    do
        git -C ${DIR} init --quiet
    done

    if [ "${OB_GIT_TYPE}" = submodule ]
    then
        local CONFIGS_DIR=${OB_GIT_MAIN_PATH}/${OB_CONFIGS_DIR}
        local ROOT_DIR=${OB_GIT_MAIN_PATH}

        echo "Adding openbar submodule..."
        git -C ${OB_GIT_MAIN_PATH} submodule --quiet add "https://github.com/openbar/openbar" ${OB_OPENBAR_DIR}
        git -C ${OB_GIT_MAIN_PATH}/${OB_OPENBAR_DIR} checkout --quiet ${OB_VERSION}

        if [ -n "${OB_POKY_DIR}" ]
        then
            echo "Adding poky submodule..."
            git -C ${OB_GIT_MAIN_PATH} submodule --quiet add "https://git.yoctoproject.org/poky" ${OB_POKY_DIR}
        fi

        if [ -n "${OB_OE_DIR}" ]
        then
            echo "Adding meta-openembedded submodule..."
            git -C ${OB_GIT_MAIN_PATH} submodule --quiet add "https://git.openembedded.org/meta-openembedded" ${OB_OE_DIR}
        fi

        create_gitignore_submodule ${ROOT_DIR}

    elif [ "${OB_GIT_TYPE}" = repo ]
    then
        local CONFIGS_DIR=${OB_GIT_MAIN_PATH}
        local ROOT_DIR=${CONFIGS_DIR}

        echo "Creating manifest..."
        create_manifest_${OB_TYPE} ${OB_GIT_MANIFEST_PATH}
    fi

    echo "Creating dockerfile..."
    create_dockerfile_${OB_TYPE} ${CONFIGS_DIR}

    echo "Creating defconfig..."
    create_defconfig_${OB_TYPE} ${CONFIGS_DIR}

    echo "Creating openbar root file..."
    create_openbar_root_${OB_TYPE} ${ROOT_DIR}

    echo "Creating initial commit..."
    for DIR in $(echo ${OB_GIT_MAIN_PATH} ${OB_GIT_MANIFEST_PATH} | tr " " "\n" | sort -u)
    do
        git -C ${DIR} add -A
        git -C ${DIR} commit --quiet -m "initial commit"
        git -C ${DIR} branch --quiet -M ${OB_GIT_BRANCH}

        if [ "${OB_GIT_REMOTE}" = yes ]
        then
            git -C ${DIR} remote add origin ${OB_GIT_BASEURL}/${DIR}
        fi
    done
)}

create_project ${TMP_DIR}
mkdir -p ${OB_OUTPUT_DIR}
mv ${TMP_DIR}/* ${OB_OUTPUT_DIR}
